Comando SELECT

```sql

--SITAXE 
select column_1, column_2,column_3
from schema_1.table_1

--Comandos b√°sicos do SQL
--Exemplo (1) Sele√ß√£o de uma coluna de uma tabela 
--Liste os e-mails dos lientes da tabela sales.coustomers
select email 
from sales.coustomers 

--Exemplo 2 Sele√ß√£o de mais dde uma coluna de uma tabela 
--Liste os emails de nos dos clientes da tabela sales.customers
--OBS: antes do comando from n√£o deve ter virgula

Select email,  first_name, last_name
from sales.customers

--Exemplo 3 sele√ß√£o de todas as colunas de uma tabela. 
--Liste os emails de nos dos clientes da tabela sales.customers

Select *
from sales.customers

```

<aside>
üí° Resumo: 
1- Comando usado para selecionar colunas de tabelas
2-  Quando selecionar mais de uma coluna,  ela devem ser separadas por v√≠rgula, sem conter v√≠rgula antes do comando FROM.
3- Pode-se utilizar o asterisco (*) para selecionar todas as colunas da tabela.

</aside>

Comando DISTINCT

```sql

--SITAXE 
select distinct column_1, column_2,column_3
from schema_1.table_1

--Comandos b√°sicos do SQL
--Exemplo (1) Sele√ß√£o de uma coluna de uma tabela 
--Liste as marcas de carro distitintas que constam na tabela products
select brand 
from sales.products -- 333 linhas

--Exemplo 2 Sele√ß√£o de mais dde uma coluna de uma tabela com DISTINCT
--Liste as marcas de carro distitintas que constam na tabela products
select distinct brand 
from sales.products -- 40 linhas

--Exemplo 2 Sele√ß√£o de mais dde uma coluna de uma tabela com DISTINCT
--Liste as marcas e anos de modelos de carro distitintas que constam na tabela products

select distinct  bran, model_year
from sales.customers

```

<aside>
üí° Resumo: 
1- Comando para remover linhas duplicadas e mostrar apenas linhas distintas.
2- Muito utilizada na etapa de explora√ß√£o de dados.
3- Caso mais de uma coluna seja selecionada, o comando SELECT DISTINCT ir√° retornar todas as combina√ß√µes distintas.

</aside>

Comando WHERE

```sql

--SITAXE 
select column_1, column_2,column_3
from schema_1.table_1
where condi√ß√£o_x = true

--Exemplo (1) Sele√ß√£o com um filtro unit√°rio.  
--liste o emails dos clientes da nossa base que moram no estado de Santa atarina.

select email, state
from sales.coustomers 
where state = 'SC'

--Exemplo 2 Filtro com mais de uma condi√ß√£o. 
--liste o emails dos clientes da nossa base que moram no estado 
--de Santa atarina ou Mato Grosso do Sul.

select email, state
from sales.coustomers 
where state = 'SC' or state ='MS'

--Exemplo 3 filtro de condi√ß√£o com data. 
--Liste os emails dos clientes da nossa base que moram no estado de Santa Catarina
--ou Mato Grosso do sul e que tem mais de 30 anos.

select email, state, birth_date 
from sales.coustomers 
where (state = 'SC' or state ='MS') and birth_date < '1991-12-28'

```

<aside>
üí° Resumo: 
1- Comando utilizado para filtra linhas de acordo com uma condi√ß√£o. 
2-  No PostgreSQL s√£o utilizada aspas simples para delimitar strings
3-  Pode-se combinar mais de uma condi√ß√£o  utilizando os operadores l√≥gicos.
4- No PostgreSQL as datas s√£o escritas no formato ‚ÄòYYYY-MM-DD‚Äô ou ‚ÄòYYYYYMMDD‚Äô

</aside>

Comando ODER BY

```sql

--SITAXE 
select column_1, column_2,column_3
from schema_1.table_1
where condi√ß√£o_x=true 
order by coluna_1

--Exemplo (1) Ordena√ß√£o de valores num√©ricos 
--Liste os produtos da tabela products na ordem crescente com base no pre√ßo 

select * 
from sales.products
order by price desc 

--Exemplo 2 Orde n√£o de texto.
--Liste  os estados distintos da tablea customers na ordem crescente.
Select distinct state 
from sales.customers
order by state 

```

<aside>
üí° Resumo: 
1- Comando usado para ordenar a sele√ß√£o de acordo com uma regar definida.
2-  Por padr√£o o comando ordena na ordem crescente. Para mudar a ordem,
para decrescente usar o comando DESC
3- No caso de strings a ordena√ß√£o seguir√° a ordem alfab√©tica.

</aside>

Comando LIMT

```sql

--SITAXE 
select column_1, column_2,column_3
from schema_1.table_1
where condi√ß√£o_x=true 
order by coluna_1
limit N

--Exemplo (1) sele√ß√£o das N primeiras linhas usando o LIMIT
--Liste as 10 primeiras linhas da tabela funel

select * 
from sales.funel
limit 10 

--Exemplo 2 Sele√ß√£o das N primeiras linhas usando o LIMIT e ORDER BY
--Liste os 10 produtos mais caros da tabela products. 

select *
from sales.funel
order by price desc
limit 10 

```

<aside>
üí° Resumo: 
1- Comando usado para limitar o n¬∞ de linhas da consulta.
2-  Muito uttilizado para a explora√ß√£o de dados. 
3- Muito utilizado em conjunto com o comando ORDER BY quando o que importa s√£o os TOP N.  EX: ‚ÄúN pagamentos recentes‚Äù, ‚ÄúN produtos mais caros‚Äù

</aside>

| Lista de unidades gerais |  |
| --- | --- |
| para usar com o comando CAST() e operador :: |  |
|  |  |
| Unidade | Descri√ß√£o |
| int | Valor inteiro |
| numeric | Valor numerico preciso |
| float | Valor numerico quebrado (com v√°rias casas decimais) |
| money | Valor em moeda |
| date | Valor em data |
| timestamp | Valor em data e hora |
| text | Valor em texto |
|  |  |
| Lista de unidades de data e hora |  |
| para usar com o comando EXTRACT |  |
|  |  |
| Unidade | Descri√ß√£o |
| day | Retorna o dia do m√™s. Vai de 1 √† 31 |
| month | Retorna o m√™s do ano. Vai de 1 √† 12 |
| week | Retorna a semana do ano. Vai de 1 √† 53 |
| year | Retorna o ano da data |
| dow | sigla para "day of week". Vai de 0 (domingo) e vai a 6 (s√°bado) |

Operadores aritm√©ticos 

```sql
-- PARA QUE SERVE ##################################################################
-- Servem para executar opera√ß√µes matem√°ticas
-- Muito utilizados para criar colunas calculadas

-- TIPOS ###########################################################################
-- +
-- -
-- *
-- /
-- ^
-- %
-- || --> n√£o √© um operador aritm√©tico

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Cria√ß√£o de coluna calculada
-- Crie uma coluna contendo a idade do cliente da tabela sales.customers
select
	email,
	birth_date,
	(current_date - birth_date) / 365 as idade_do_cliente
from sales.customers

select
	email,
	birth_date,
	(current_date - birth_date) / 365 as "idade do cliente"
from sales.customers

-- (Exemplo 2) Utiliza√ß√£o da coluna calculada nas queries
-- Liste os 10 clientes mais novos da tabela customers

select
	email,
	birth_date,
	(current_date - birth_date) / 365 as "idade do cliente"
from sales.customers
order by "idade do cliente"

-- (Exemplo 3) Cria√ß√£o de coluna calculada com strings 
-- Crie a coluna "nome_completo" contendo o nome completo do cliente
select
	first_name || ' ' || last_name as nome_completo
from sales.customers

-- RESUMO ##########################################################################
-- (1) Servem para executar opera√ß√µes matem√°ticas
-- (2) Muito utilizado para criar colunas calculadas
-- (3) Alias (pseud√¥nimos) s√£o muito utilizados para dar nome as colunas calculadas.
-- (4) Para criar pseud√¥nimos que cont√©m espa√ßos no nome s√£o utilizadas aspas duplas
-- (5) No caso de strings o operador de adi√ß√£o (||) ir√° concatenar as strings
-- (6) Utilize o Guia de comandos para consultar os operadores utilizados no SQL
```

Operadores de compara√ß√£o

```sql
-- PARA QUE SERVE ##################################################################
-- Servem para comparar dois valores retornando TRUE ou FALSE
-- Muito utilizado em conjunto com a fun√ß√£o WHERE para filtrar linhas de uma sele√ß√£o

-- TIPOS ###########################################################################
-- =
-- >
-- <
-- >=
-- <=
-- <>

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Uso de operadores como flag
-- Crie uma coluna que retorne TRUE sempre que um cliente for um profissional clt 
select
    customer_id,
    first_name,
    professional_status
from sales.customers

-- RESUMO ##########################################################################
-- (1) Servem para comparar dois valores retornando TRUE ou FALSE
-- (2) Muito utilizado em conjunto com a fun√ß√£o WHERE para filtrar linhas de uma 
-- sele√ß√£o
-- (3) Utilizados para criar colunas Flag que retornem TRUE ou FALSE
-- (4) Utilize o Guia de comandos para consultar os operadores utilizados no SQL
```

Operadores l√≥gicos

```sql
-- PARA QUE SERVE ##################################################################
-- Usados para unir express√µes simples em uma composta

-- TIPOS ###########################################################################
-- AND
-- OR
-- NOT
-- BETWEEN
-- IN
-- LIKE
-- ILIKE
-- IS NULL

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Uso do comando BETWEEN 
-- Selecione ve√≠culos que custam entre 100k e 200k na tabela products
select *
from sales.products
where price >= 100000 and price <= 200000

-- (Exemplo 2)  Uso do comando NOT
-- Selecione ve√≠culos que custam abaixo de 100k ou acima 200k 
select *
from sales.products
where price < 100000 or price > 200000

select * 
from sales.products
where price not between 100000 and 200000

-- (Exemplo 3) Uso do comando IN
-- Selecionar produtos que sejam da marca HONDA, TOYOTA ou RENAULT
select *
from sales.products
where brand = 'HONDA' or brand = 'TOYOTA' or brand = 'RENAULT'

-- (Exemplo 4) Uso do comando LIKE (matchs imperfeitos)
-- Selecione os primeiros nomes distintos da tabela customers que come√ßam
-- com as iniciais ANA
select distinct first_name
from sales.customers
where first_name = 'ANA'

-- (Exemplo 5) Uso do comando ILIKE (ignora letras mai√∫sculas e min√∫sculas)
-- Selecione os primeiros nomes distintos com iniciais 'ana'
select distinct first_name
from sales.customers
where first_name like 'ana%'

select distinct first_name
from sales.customers
where first_name ilike 'ana%' -- ignora a sele√ß√£o com ltras mai√∫sculas e min√∫sculas.

-- (Exemplo 6) Uso do comando IS NULL
-- Selecionar apenas as linhas que cont√©m nulo no campo "population" na tabela
-- temp_tables.regions
select *
from temp_tables.regions
where population = null

-- RESUMO ##########################################################################
-- (1) Usados para unir express√µes simples em uma composta
-- (2) AND: Verifica se duas compara√ß√µes s√£o simultaneamente verdadeiras
-- (3) OR: Verifica se uma ou outra compara√ß√£o √© verdadeiras
-- (4) BETWEEN: Verifica quais valores est√£o dentro do range definido
-- (5) IN: Funciona como multiplos ORs
-- (6) LIKE e ILIKE: Comparam textos e s√£o sempre utilizados em conjunto com o 
-- operador %, que funciona como um coringa, indicando que qualquer texto pode 
-- aparecer no lugar do campo
-- (7) ILIKE ignora se o campo tem letras mai√∫sculas ou min√∫sculas na compara√ß√£o
-- (8) IS NULL: Verifica se o campo √© nulo
-- (9) Utilize o Guia de comandos para consultar os operadores utilizados no SQL
```

Fun√ß√µes de agrega√ß√£o

```sql
-- PARA QUE SERVE ##################################################################
-- Servem para executar opera√ß√µes aritm√©tica nos registros de uma coluna 

-- TIPOS DE FUN√á√ïES AGREGADAS ######################################################
-- COUNT()
-- SUM()
-- MIN()
-- MAX()
-- AVG()

-- EXEMPLOS ########################################################################

-- COUNT() -------------------------------------------------------------------------

-- (Exemplo 1) Contagem de todas as linhas de uma tabela
-- Conte todas as visitas realizadas ao site da empresa fict√≠cia
select count(*)
from sales.funnel

-- (Exemplo 2) Contagem das linhas de uma coluna
-- Conte todos os pagamentos registrados na tabela sales.funnel 
select count(paid_date)
from sales.funnel

-- (Exemplo 3) Contagem distinta de uma coluna
-- Conte todos os produtos distintos visitados em jan/21
select count(distinct product_id)
from sales.funnel
where visit_page_date between '2021-01-01' and '2021-01-31'

-- OUTRAS FUN√á√ïES ------------------------------------------------------------------

-- (Exemplo 4) Calcule o pre√ßo m√≠nimo, m√°ximo e m√©dio dos productos da tabela products
select min(price), max(price), avg(price)
from sales.products

-- (Exemplo 5) Informe qual √© o ve√≠culo mais caro da tabela products
select max(price) from sales.products

select *
from sales.products
where price = (select max(price) from sales.products)

-- RESUMO ##########################################################################
-- (1) Servem para executar opera√ß√µes aritm√©tica nos registros de uma coluna 
-- (2) Fun√ß√µes agregadas n√£o computam c√©lulas vazias (NULL) como zero
-- (3) Na fun√ß√£o COUNT() pode-se utilizar o asterisco (*) para contar os registros
-- (4) COUNT(DISTINCT ) ir√° contar apenas os valores exclusivos
```

Group By

```sql
-- PARA QUE SERVE ##################################################################
-- Serve para agrupar registros semelhantes de uma coluna
-- Normalmente utilizado em conjunto com as Fun√ß√µes de agrega√ß√£o

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Contagem agrupada de uma coluna
-- Calcule o n¬∫ de clientes da tabela customers por estado
select state, count(*) as contagem
from sales.customers
group by state
order by contagem desc

-- (Exemplo 2) Contagem agrupada de v√°rias colunas
-- Calcule o n¬∫ de clientes por estado e status profissional 
select state, professional_status, count(*) as contagem
from sales.customers
group by 1, 2
order by state, contagem desc

-- (Exemplo 3) Sele√ß√£o de valores distintos
-- Selecione os estados distintos na tabela customers utilizando o group by
select distinct state
from sales.customers

select state
from sales.customers
group by state

-- RESUMO ##########################################################################
-- (1) Serve para agrupar registros semelhantes de uma coluna, 
-- (2) Normalmente utilizado em conjunto com as Fun√ß√µes de agrega√ß√£o
-- (3) Pode-se referenciar a coluna a ser agrupada pela sua posi√ß√£o ordinal 
-- (ex: GROUP BY 1,2,3 ir√° agrupar pelas 3 primeiras colunas da tabela) 
-- (4) O GROUP BY sozinho funciona como um DISTINCT, eliminando linhas duplicadas
```

HAVING

```sql
-- PARA QUE SERVE ##################################################################
-- Serve para filtrar linhas da sele√ß√£o por uma coluna agrupada

-- EXEMPLOS ########################################################################

-- (Exemplo 1) sele√ß√£o com filtro no HAVING 
-- Calcule o n¬∫ de clientes por estado filtrando apenas estados acima de 100 clientes
select 
    state, 
    count(*)
from sales.customers
group by state
having count(*) > 100

-- RESUMO ##########################################################################
-- (1) Tem a mesma fun√ß√£o do WHERE mas pode ser usado para filtrar os resultados 
-- das fun√ß√µes agregadas enquanto o WHERE possui essa limita√ß√£o
-- (2) A fun√ß√£o HAVING tamb√©m pode filtrar colunas n√£o agregadas
```

Tipos de JOIN

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2831f278-a234-4d07-a234-95404a6c861f/Untitled.png)

```sql
-- PARA QUE SERVE ##################################################################
-- Servem para combinar colunas de uma ou mais tabelas

-- SINTAXE #########################################################################
select t1.coluna_1, t1.coluna_1, t2.coluna_1, t2.coluna_2
from schema.tabela_1 as t1
ALGUM join schema.tabela_2 as t2
    on condi√ß√£o_de_join

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Utilize o LEFT JOIN para fazer join entre as tabelas
-- temp_tables.tabela_1 e temp_tables.tabela_2
select * from temp_tables.tabela_1
select * from temp_tables.tabela_2

select t1.cpf, t1.name, t2.state
from temp_tables.tabela_1 as t1 
left join temp_tables.tabela_2 as t2
	on t1.cpf = t2.cpf

-- (Exemplo 2) Utilize o INNER JOIN para fazer join entre as tabelas
-- temp_tables.tabela_1 e temp_tables.tabela_2
select t1.cpf, t1.name, t2.state
from temp_tables.tabela_1 as t1 
inner join temp_tables.tabela_2 as t2
	on t1.cpf = t2.cpf

-- (Exemplo 3) Utilize o RIGHT JOIN para fazer join entre as tabelas
-- temp_tables.tabela_1 e temp_tables.tabela_2
select t2.cpf, t1.name, t2.state
from temp_tables.tabela_1 as t1 
right join temp_tables.tabela_2 as t2
	on t1.cpf = t2.cpf

-- (Exemplo 4) Utilize o FULL JOIN para fazer join entre as tabelas
-- temp_tables.tabela_1 e temp_tables.tabela_2
select t2.cpf, t1.name, t2.state
from temp_tables.tabela_1 as t1 
full join temp_tables.tabela_2 as t2
	on t1.cpf = t2.cpf

-- RESUMO ##########################################################################
-- (1) Servem para combinar colunas de uma ou mais tabelas
-- (2) Pode-se chamar todas as colunas com o asterisco (*), mas n√£o √© recomendado
-- (3) √â uma boa pr√°tica criar aliases para nomear as tabelas utilizadas 
-- (4) O JOIN sozinho funciona como INNER JOIN

-- EXERC√çCIOS ########################################################################

-- (Exemplo 1) Identifique qual √© o status profissional mais frequente nos clientes 
-- que compraram autom√≥veis no site

select 
	cus.professional_status,
	count(fun.paid_date) as pagamentos

from sales.funnel as fun
left join sales.customers as cus
	on fun.customer_id = cus.customer_id
group by cus.professional_status
order by pagamentos desc

-- (Exemplo 2) Identifique qual √© o g√™nero mais frequente nos clientes que compraram
-- autom√≥veis no site. Obs: Utilizar a tabela temp_tables.ibge_genders
select * from temp_tables.ibge_genders limit 10

select 
	ibge.gender,
	count(fun.paid_date)
from sales.funnel as fun
left join sales.customers as cus
	on fun.customer_id = cus.customer_id
left join temp_tables.ibge_genders as ibge
	on lower(cus.first_name) = ibge.first_name
group by ibge.gender

-- (Exemplo 3) Identifique de quais regi√µes s√£o os clientes que mais visitam o site
-- Obs: Utilizar a tabela temp_tables.regions
select * from sales.customers limit 10
select * from temp_tables.regions limit 10

select
	reg.region,
	count(fun.visit_page_date) as visitas
from sales.funnel as fun
left join sales.customers as cus
	on fun.customer_id = cus.customer_id
left join temp_tables.regions as reg
	on lower(cus.city) = lower(reg.city)
	and lower(cus.state) = lower(reg.state)
group by reg.region
order by visitas desc
```

UNION

```sql
-- SINTAXE #########################################################################
select coluna_1, coluna_2
from schema_1.tabela_1

union / union all

select coluna_3, coluna_4 
from schema_2.tabela_2

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Uni√£o simples de duas tabelas
-- Una a tabela sales.products com a tabela temp_tables.products_2

select * from sales.products
union all
select * from temp_tables.products_2
```

Subquery

```sql
-- PARA QUE SERVE ##################################################################
-- Servem para consultar dados de outras consultas.

-- TIPOS ###########################################################################
-- Subquery no WHERE
-- Subquery com WITH
-- Subquery no FROM
-- Subquery no SELECT

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Subquery no WHERE
-- Informe qual √© o ve√≠culo mais barato da tabela products

select *
from sales.products
where price = (select min(price) from sales.products)

-- (Exemplo 2) Subquery com WITH
-- Calcule a idade m√©dia dos clientes por status profissional
with alguma_tabela as (
select
	professional_status,
	(current_date - birth_date)/365 as idade
from sales.customers
)

select
	professional_status,
	avg(idade) as idade_media
from alguma_tabela
group by professional_status

-- (Exemplo 3) Subquery no FROM
-- Calcule a m√©dia de idades dos clientes por status profissional
select
	professional_status,
	avg(idade) as idade_media
from (
		select
			professional_status,
			(current_date - birth_date)/365 as idade
		from sales.customers
	 ) as alguma_tabela
group by professional_status

-- (Exemplo 4) Subquery no SELECT
-- Na tabela sales.funnel crie uma coluna que informe o n¬∫ de visitas acumuladas 
-- que a loja visitada recebeu at√© o momento

select
	fun.visit_id,
	fun.visit_page_date,
	sto.store_name,
	(
		select count(*)
		from sales.funnel as fun2
		where fun2.visit_page_date <= fun.visit_page_date
			and fun2.store_id = fun.store_id
	) as visitas_acumuladas
from sales.funnel as fun
left join sales.stores as sto
	on fun.store_id = sto.store_id
order by sto.store_name, fun.visit_page_date

-- RESUMO ##########################################################################
-- (1) Servem para consultar dados de outras consultas.
-- (2) Para que as subqueries no WHERE e no SELECT funcionem, elas devem retornar 
-- apenas um √∫nico valor
-- (3) N√£o √© recomendado utilizar subqueries diretamente dentro do FROM pois isso 
-- dificulta a legibilidade da query.

-- EXEMPLOS ########################################################################

-- (Exemplo 1) An√°lise de recorr√™ncia dos leads
-- Calcule o volume de visitas por dia ao site separado por 1¬™ visita e demais visitas

with primeira_visita as (

	select customer_id, min(visit_page_date) as visita_1
	from sales.funnel
	group by customer_id

)

select
	fun.visit_page_date,
	(fun.visit_page_date <> primeira_visita.visita_1) as lead_recorrente,
	count(*)

from sales.funnel as fun
left join primeira_visita
	on fun.customer_id = primeira_visita.customer_id
group by fun.visit_page_date, lead_recorrente
order by fun.visit_page_date desc, lead_recorrente

-- (Exemplo 2) An√°lise do pre√ßo versus o pre√ßo m√©dio
-- Calcule, para cada visita ao site, quanto o pre√ßo do um ve√≠culo visitado pelo cliente
-- estava acima ou abaixo do pre√ßo m√©dio dos ve√≠culos daquela marca 
-- (levar em considera√ß√£o o desconto dado no ve√≠culo)

with preco_medio as (

	select brand, avg(price) as preco_medio_da_marca
	from sales.products
	group by brand

)

select
	fun.visit_id,
	fun.visit_page_date,
	pro.brand,
	(pro.price * (1+fun.discount)) as preco_final,
	preco_medio.preco_medio_da_marca,
	((pro.price * (1+fun.discount)) - preco_medio.preco_medio_da_marca) as preco_vs_media

from sales.funnel as fun
left join sales.products as pro
	on fun.product_id = pro.product_id
left join preco_medio
	on pro.brand = preco_medio.brand
```

<aside>
üí° A ideia aqui √© voc√™ mudar a tabela de dados antes mecher nos c√°lculos. 
A subquery no selec √© muito pesada

</aside>

**Convers√£o de unidades**

```sql
-- Exemplo 01 - Conver√ß√£o de texto em data 
-- Corrija a query abaixo utilizando o operador ::

select '2021-10-01'::date - '2021-02-01'::date 
select nome_coluna::date
from  colum_name 

-- Exemplo 2 Convers√£o de texto em n√∫moero
-- Corrija a query abaixo utilizando o operador :: 
select '100'::numeric -'10':: numeric 

--Exemplo 03 Convers√£o de n√∫meoro em texto 
-- Corrija a query abaixo utilizando o operador :: 

select replace(112122::text, '1', 'A')

-- Exemplo  4 Convers√£o de testo em data 
-- Corrija a query abaico utilizando a fun√ß√£o CAST
-- Usar quando o Operador :: n√£o funciona!
select cast('2021-10-01' as date) - caster('2021-02-01' as date)
```

<aside>
üí° Resumo: (1) O operador :: e o CAST( ) s√£o fun√ß√µes utilizadas para converte um dado para a unidade desejada. 
(2) O operador :: √© mais ‚Äúclean‚Äù, por√©m, em algumas ocasi√µes n√£o funciona, sendo necess√°ria utilizar a fun√ß√£o CAST( ).
(3) Utilize guias de comandos para consultar unidades utilizadas.

</aside>

Tratamento de dados geral

```sql
-- Exemplo 01 - CAgrupamento de dados com CASE WHEN
-- Calcule o n¬∞ de clientes que ganham abaixo de 5k, etre 5k e 10k, entre 10k
-- e 15k e acima de 5 k 

with faixa_de_renda as(
	select
		income,
		case
		when income < 5000 then '0-5000'
		when income >= 5000 and income < 10000 then'5000-10000'
		when income >= 10000 and income <15000 then '10000-1500'
		else "15000+"
		end as faixa_renda
	from sales.customers
)

Select faixa_renda (*)
from faixa_de_renda
groupy by faixa_renda

--Exemplo n√∫mero 2 tratamento de dados nulos com COALESCE
-- Crie uma coluna chamada popula√ß√£o_ajustada na tabela tem_tables.regions e,
-- preencha os dados da coluna population, mas caso esse campo estiver lnulo,
-- preencha com a popula√ß√£o m√©dia (geral) das cidades do BRasil.

selec * from temp_tables. regions limit 10 
select
		*, 
		case
		when population is not null then population
		else (select avg (population) from temp_tables.regions)
		end as populacao_ajustada
from temp_tables.regions
where population is null

-- Agora para Colesce

selec * from temp_tables. regions limit 10 
select
		*, 
	colesce(population, (select avg(population) from temp_tables.regions)) as populacao_ajustada 
from temp_tables.regions
 

```

<aside>
üí° COALESCE verifica qual √© o primeiro campo n√£o nulo de uma lista de valores, pulando para o segundo item. Ele n√£o se limita apenas a dois argumento*.

</aside>

Tratamento de texto
‚Äî Tipos: LOWER ( ); UPPER ( ); TRIM ( ); REPLACE ( ) 

```sql
-- Exemplo 01 - CAgrupamento de dados com CASE WHEN
-- Calcule o n¬∞ de clientes que ganham abaixo de 5k, etre 5k e 10k, entre 10k
-- e 15k e acima de 5 k 

with faixa_de_renda as(
	select
		income,
		case
		when income < 5000 then '0-5000'
		when income >= 5000 and income < 10000 then'5000-10000'
		when income >= 10000 and income <15000 then '10000-1500'
		else "15000+"
		end as faixa_renda
	from sales.customers
)

Select faixa_renda (*)
from faixa_de_renda
groupy by faixa_renda

--Exemplo n√∫mero 2 tratamento de dados nulos com COALESCE
-- Crie uma coluna chamada popula√ß√£o_ajustada na tabela tem_tables.regions e,
-- preencha os dados da coluna population, mas caso esse campo estiver lnulo,
-- preencha com a popula√ß√£o m√©dia (geral) das cidades do BRasil.

selec * from temp_tables. regions limit 10 
select
		*, 
		case
		when population is not null then population
		else (select avg (population) from temp_tables.regions)
		end as populacao_ajustada
from temp_tables.regions
where population is null

-- Agora para Colesce

selec * from temp_tables. regions limit 10 
select
		*, 
	colesce(population, (select avg(population) from temp_tables.regions)) as populacao_ajustada 
from temp_tables.regions
 

```

<aside>
üí° COALESCE verifica qual √© o primeiro campo n√£o nulo de uma lista de valores, pulando para o segundo item. Ele n√£o se limita apenas a dois argumento*.

</aside>

Tratamento de datas

```sql
-- TIPOS ###########################################################################
-- INTERVAL
-- DATE_TRUNC
-- EXTRACT
-- DATEDIFF

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Soma de datas utilizando INTERVAL
-- Calcule a data de hoje mais 10 unidades (dias, semanas, meses, horas)

select current_date + 10
select (current_date + interval '10 weeks')::date
select (current_date + interval '10 months')::date
select current_date + interval '10 hours'

-- (Exemplo 2) Truncagem de datas utilizando DATE_TRUNC
-- Calcule quantas visitas ocorreram por m√™s no site da empresa

select visit_page_date, count(*)
from sales.funnel
group by visit_page_date
order by visit_page_date desc

select
	date_trunc('month', visit_page_date)::date as visit_page_month,
	count(*)
from sales.funnel
group by visit_page_month
order by visit_page_month desc

-- (Exemplo 3) Extra√ß√£o de unidades de uma data utilizando EXTRACT
-- Calcule qual √© o dia da semana que mais recebe visitas ao site

select
	extract('dow' from visit_page_date) as dia_da_semana,
	count(*)
from sales.funnel
group by dia_da_semana
order by dia_da_semana

-- (Exemplo 4) Diferen√ßa entre datas com operador de subtra√ß√£o (-) 
-- Calcule a diferen√ßa entre hoje e '2018-06-01', em dias, semanas, meses e anos.

select (current_date - '2018-06-01')
select (current_date - '2018-06-01')/7
select (current_date - '2018-06-01')/30
select (current_date - '2018-06-01')/365

select datediff('weeks', '2018-06-01', current_date)

-- RESUMO --------------------------------------------------------------------------
-- (1) O comando INTERVAL √© utilizado para somar datas na unidade desejada. Caso a 
-- unidade n√£o seja informada, o SQL ir√° entender que a soma foi feita em dias.
-- (2) O comando DATE_TRUNC √© utilizado para truncar uma data no in√≠cio do per√≠odo
-- (3) O comando EXTRACT √© utilizado para extrair unidades de uma data/timestamp
-- (4) O c√°lculo da diferen√ßa entre datas com o operador de subtra√ß√£o (-) retorna  
-- valores em dias. Para calcular a diferen√ßa entre datas em outra unidade √© necess√°rio
-- fazer uma transforma√ß√£o de unidades (ou criar uma fun√ß√£o para isso)
-- (5) Utilize o Guia de comandos para consultar as unidades de data e hora utilizadas 
-- no SQL
```

<aside>
üí° COALESCE verifica qual √© o primeiro campo n√£o nulo de uma lista de valores, pulando para o segundo item. Ele n√£o se limita apenas a dois argumento*.

</aside>

Fun√ß√µes

```sql
-- PARA QUE SERVEM #################################################################
-- Servem para criar comandos personalizados de scripts usados recorrentemente.

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Crie uma fun√ß√£o chamada DATEDIFF para calcular a diferen√ßa entre
-- duas datas em dias, semanas, meses, anos

select (current_date - '2018-06-01')
select (current_date - '2018-06-01')/7
select (current_date - '2018-06-01')/30
select (current_date - '2018-06-01')/365

select datediff('weeks', '2018-06-01', current_date)

create function datediff(unidade varchar, data_inicial date, data_final date)
returns integer
language sql

as

$$

	select
		case
			when unidade in ('d', 'day', 'days') then (data_final - data_inicial)
			when unidade in ('w', 'week', 'weeks') then (data_final - data_inicial)/7
			when unidade in ('m', 'month', 'months') then (data_final - data_inicial)/30
			when unidade in ('y', 'year', 'years') then (data_final - data_inicial)/365
			end as diferenca

$$

select datediff('years', '2021-02-04', current_date)

-- (Exemplo 2) Delete a fun√ß√£o DATEDIFF criada no exerc√≠cio anterior

drop function datediff

-- RESUMO ##########################################################################
-- (1) Para criar fun√ß√µes, utiliza-se o comando CREATE FUNCTION
-- (2) Para que o comando funcione √© obrigat√≥rio informar (a) quais as unidades dos 
-- INPUTS (b) quais as unidades dos OUTPUTS e (c) em qual linguagem a fun√ß√£o ser√° escrita
-- (3) O script da fun√ß√£o deve estar delimitado por $$
-- (4) Para deletar uma fun√ß√£o utiliza-se o comando DROP FUNCTION
```

Fun√ß√µes

```sql
Fun√ß√µes

```sql
-- PARA QUE SERVEM #################################################################
-- Servem para criar comandos personalizados de scripts usados recorrentemente.

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Crie uma fun√ß√£o chamada DATEDIFF para calcular a diferen√ßa entre
-- duas datas em dias, semanas, meses, anos

select (current_date - '2018-06-01')
select (current_date - '2018-06-01')/7
select (current_date - '2018-06-01')/30
select (current_date - '2018-06-01')/365

select datediff('weeks', '2018-06-01', current_date)

create function datediff(unidade varchar, data_inicial date, data_final date)
returns integer
language sql

as

$$

	select
		case
			when unidade in ('d', 'day', 'days') then (data_final - data_inicial)
			when unidade in ('w', 'week', 'weeks') then (data_final - data_inicial)/7
			when unidade in ('m', 'month', 'months') then (data_final - data_inicial)/30
			when unidade in ('y', 'year', 'years') then (data_final - data_inicial)/365
			end as diferenca

$$

select datediff('years', '2021-02-04', current_date)

-- (Exemplo 2) Delete a fun√ß√£o DATEDIFF criada no exerc√≠cio anterior

drop function datediff

-- RESUMO ##########################################################################
-- (1) Para criar fun√ß√µes, utiliza-se o comando CREATE FUNCTION
-- (2) Para que o comando funcione √© obrigat√≥rio informar (a) quais as unidades dos 
-- INPUTS (b) quais as unidades dos OUTPUTS e (c) em qual linguagem a fun√ß√£o ser√° escrita
-- (3) O script da fun√ß√£o deve estar delimitado por $$
-- (4) Para deletar uma fun√ß√£o utiliza-se o comando DROP FUNCTION
```
```

Cria√ß√£o de Tabelas

```sql
-- CONTE√öDO ########################################################################
-- Cria√ß√£o de tabela a partir de uma query
-- Cria√ß√£o de tabela a partir do zero
-- Dele√ß√£o de tabelas

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Cria√ß√£o de tabela a partir de uma query
-- Crie uma tabela chamada customers_age com o id e a idade dos clientes. 
-- Chame-a de temp_tables.customers_age

select
	customer_id,
	datediff('years', birth_date, current_date) idade_cliente
	into temp_tables.customers_age
from sales.customers

select *
from temp_tables.customers_age

-- (Exemplo 2) Cria√ß√£o de tabela a partir do zero
-- Crie uma tabela com a tradu√ß√£o dos status profissionais dos clientes. 
-- Chame-a de temp_tables.profissoes

select distinct professional_status
from sales.customers

create table temp_tables.profissoes (
	professional_status varchar,
	status_profissional varchar
)

insert into temp_tables.profissoes
(professional_status, status_profissional)

values
('freelancer', 'freelancer'),
('retired', 'aposentado(a)'),
('clt', 'clt'),
('self_employed', 'aut√¥nomo(a)'),
('other', 'outro'),
('businessman', 'empres√°rio(a)'),
('civil_servant', 'funcion√°rio p√∫blico(a)'),
('student', 'estudante')

select * from temp_tables.profissoes

-- (Exemplo 3) Dele√ß√£o de tabelas
-- Delete a tabela temp_tables.profissoes

drop table temp_tables.profissoes

-- RESUMO ##########################################################################
-- (1) Para criar tabelas a partir de uma query basta escrever a query normalmente e
-- colocar o comando INTO antes do FROM informando o schema e o nome da tabela 
-- a ser criada
-- (2) Para criar tabelas a partir do zero √© necess√°rio (a) criar uma tabela vazia 
-- com o comando CREATE TABLE (b) Informar que valores ser√£o inseridos com o comando
-- INSERT INTO seguido do nome das colunas (c) Inserir os valores manualmente em forma 
-- de lista ap√≥s o comando VALUES
-- (3) Para deletar uma tabela utiliza-se o comando DROP TABLE
```

Linhas -  Inscri√ß√µes, atualiza√ß√£o e dele√ß√£o

```sql
-- CONTE√öDO ########################################################################
-- Inser√ß√£o de linhas
-- Atualiza√ß√£o de linhas
-- Dele√ß√£o de linhas

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Inser√ß√£o de linhas
-- Insira os status 'desempregado(a)' e 'estagi√°rio(a)' na temp_table.profissoes

create table temp_tables.profissoes (
	professional_status varchar,
	status_profissional varchar
);

insert into temp_tables.profissoes
(professional_status, status_profissional)

values
('freelancer', 'freelancer'),
('retired', 'aposentado(a)'),
('clt', 'clt'),
('self_employed', 'aut√¥nomo(a)'),
('other', 'outro'),
('businessman', 'empres√°rio(a)'),
('civil_servant', 'funcion√°rio p√∫blico(a)'),
('student', 'estudante')

select * from temp_tables.profissoes

insert into temp_tables.profissoes
(professional_status, status_profissional)

values
('unemployed', 'desempregado(a)'),
('trainee', 'estagiario(a)')

-- (Exemplo 2) Atualiza√ß√£o de linhas
-- Corrija a tradu√ß√£o de 'estagi√°rio(a)' de 'trainee' para 'intern' 

update temp_tables.profissoes
set professional_status = 'intern'
where status_profissional = 'estagiario(a)'

select * from temp_tables.profissoes

-- (Exemplo 3) Dele√ß√£o de linhas
-- Delete as linhas dos status 'desempregado(a)' e 'estagi√°rio(a)'

delete from temp_tables.profissoes
where status_profissional = 'desempregado(a)'
or status_profissional = 'estagiario(a)'

select * from temp_tables.profissoes

-- RESUMO ##########################################################################
-- (1) Para inserir linhas em uma tabela √© necess√°rio (a) Informar que valores ser√£o 
-- inseridos com o comando INSERT INTO seguido do nome da tabela e nome das colunas 
-- (b) Inserir os valores manualmente em forma de lista ap√≥s o comando VALUES
-- (2) Para atualizar as linhas de uma tabela √© necess√°rio (a) Informar qual tabela
-- ser√° atualizada com o comando UPDATE (b) Informar qual o novo valor com o comando SET 
-- (c) Delimitar qual linha ser√° modificada utilizando o filtro WHERE
-- (3) Para deletar linhas de uma tabela √© necess√°rio (a) Informar de qual tabela as
-- linhas ser√£o deletadas com o comando DELETE FROM (b) Delimitar qual linha ser√° 
-- deletada utilizando o filtro WHERE
```

Colunas - Inser√ß√£o, atualiza√ß√£o e dele√ß√£o

```sql
-- CONTE√öDO ########################################################################
-- Inser√ß√£o de colunas
-- Altera√ß√£o de colunas
-- Dele√ß√£o de colunas

-- EXEMPLOS ########################################################################

-- (Exemplo 1) Inser√ß√£o de Colunas
-- Insira uma coluna na tabela sales.customers com a idade do cliente
alter table sales.customers
add customer_age int

select * from sales.customers limit 10

update sales.customers
set customer_age = datediff('years', birth_date, current_date)
where true

-- (Exemplo 2) Altera√ß√£o do tipo da coluna
-- Altere o tipo da coluna customer_age de inteiro para varchar
alter table sales.customers
alter column customer_age type varchar

select * from sales.customers limit 10

-- (Exemplo 3) Altera√ß√£o do nome da coluna
-- Renomeie o nome da coluna "customer_age" para "age"
alter table sales.customers
rename column customer_age to age

select * from sales.customers limit 10

-- (Exemplo 4) Dele√ß√£o de coluna
-- Delete a coluna "age"

alter table sales.customers
drop column age

select * from sales.customers limit 10

-- RESUMO ##########################################################################
-- (1) Para fazer qualquer modifica√ß√£o nas colunas de uma tabela utiliza-se o comando 
-- ALTER TABLE seguido do nome da tabela
-- (2) Para adicionar colunas utiliza-se o comando ADD seguido do nome da coluna e da
-- unidade da nova coluna
-- (3) Para mudar o tipo de unidade de uma coluna utiliza-se o comando ALTER COLUMN 
-- (4) Para renomear uma coluna utiliza-se o comando RENAME COLUMN
-- (5) Para deletar uma coluna utiliza-se o comando DROP COLUMN
```
